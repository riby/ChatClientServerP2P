/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package chatclientserverp2p;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.net.Socket;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import model.PeerServerDBConnect;

/**
 *
 * @author user
 */
public class ChatGui extends javax.swing.JFrame implements Runnable {

    /**
     * Creates new form ChatGui
     */
    private static int PORT;
    public static Map<Integer, Boolean> PORTNUMS = new HashMap<Integer, Boolean>();
    public static String UserName = "Anonymous"; //default name
    private static ConnectionP2P ChatClient;
    PeerServerDBConnect p = new PeerServerDBConnect();

    public ChatGui(int PORT, String UserName) {

        this.PORT = PORT;

        this.UserName = UserName;
        initComponents();
        disconnectBt.setEnabled(false);
        multiCastBt.setEnabled(false);
        copyBt.setEnabled(false);
        getOnlinePeers.setEnabled(false);
        uniCastMsg.setEnabled(false);

    }

    public void run() {

    }

    public static void Connect() {
        try {

            //Make connection to the assigned port on local host
            final String HOST = "localhost";
            Socket SOCK = new Socket(HOST, PORT);
            System.out.println("You Connected to " + HOST);
            ChatClient = new ConnectionP2P(SOCK);
            PrintWriter OUT = new PrintWriter(SOCK.getOutputStream());
            OUT.println(UserName);
            OUT.flush();
            Thread X = new Thread(ChatClient);
            X.start();
        } catch (Exception X) {
            System.out.println(X);
            JOptionPane.showMessageDialog(null, "Server not responing");
            System.exit(0);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        disconnectBt = new javax.swing.JButton();
        connectBt = new javax.swing.JButton();
        multiCastBt = new javax.swing.JButton();
        copyBt = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        chatTA = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        onlineUserLt = new javax.swing.JList();
        messageTF = new javax.swing.JTextField();
        getOnlinePeers = new javax.swing.JButton();
        uniCastMsg = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle(UserName);

        disconnectBt.setText("Disconnect");
        disconnectBt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disconnectBtActionPerformed(evt);
            }
        });

        connectBt.setText("Connect");
        connectBt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectBtActionPerformed(evt);
            }
        });

        multiCastBt.setText("Multicast");
        multiCastBt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                multiCastBtActionPerformed(evt);
            }
        });

        copyBt.setText("Copy");
        copyBt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyBtActionPerformed(evt);
            }
        });

        chatTA.setColumns(20);
        chatTA.setRows(5);
        jScrollPane1.setViewportView(chatTA);

        jScrollPane2.setViewportView(onlineUserLt);

        messageTF.setText("Message");
        messageTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                messageTFActionPerformed(evt);
            }
        });
        messageTF.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                messageTFFocusGained(evt);
            }
        });

        getOnlinePeers.setText("Online Peers");
        getOnlinePeers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getOnlinePeersActionPerformed(evt);
            }
        });

        uniCastMsg.setText("UniCast");
        uniCastMsg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uniCastMsgActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(messageTF)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(disconnectBt)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(connectBt)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(multiCastBt)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(copyBt)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(uniCastMsg)
                            .addComponent(getOnlinePeers))
                        .addGap(11, 11, 11))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(messageTF, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(uniCastMsg)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(disconnectBt)
                    .addComponent(connectBt)
                    .addComponent(multiCastBt)
                    .addComponent(copyBt)
                    .addComponent(getOnlinePeers))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 261, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void connectBtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectBtActionPerformed

        Connect();
        disconnectBt.setEnabled(true);
        multiCastBt.setEnabled(true);
        copyBt.setEnabled(true);
        getOnlinePeers.setEnabled(true);
        uniCastMsg.setEnabled(true);
        connectBt.setEnabled(false);

// TODO add your handling code here:
    }//GEN-LAST:event_connectBtActionPerformed

    private void multiCastBtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_multiCastBtActionPerformed

        if (!messageTF.getText().equals("")) {
            try {
                ChatClient.SEND(messageTF.getText());
            } catch (IOException ex) {
                Logger.getLogger(ChatGui.class.getName()).log(Level.SEVERE, null, ex);
            }
            messageTF.requestFocus();
        }
// TODO add your handling code here:
    }//GEN-LAST:event_multiCastBtActionPerformed
    public static void addUserToServer() {

        PeerEventListner.CurrentUsers.add(UserName);
        Connect();

    }
    private void disconnectBtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disconnectBtActionPerformed

        try {
            //Remove user from server list
            ChatClient.DISCONNECT();
        } catch (Exception X) {
            X.printStackTrace();
        }
// TODO add your handling code here:
    }//GEN-LAST:event_disconnectBtActionPerformed

    //copy chat to file
    private void copyBtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyBtActionPerformed

        String str = chatTA.getText();
        JFrame parentFrame = new JFrame();
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new File("./"));
        int actionDialog = chooser.showSaveDialog(parentFrame);
        if (actionDialog == JFileChooser.APPROVE_OPTION) {
            BufferedWriter out = null;
            File fileName = new File(chooser.getSelectedFile() + "");
            if (fileName == null) {
                return;
            }
            if (fileName.exists()) {
                actionDialog = JOptionPane.showConfirmDialog(parentFrame,
                        "Replace existing file?");
                if (actionDialog == JOptionPane.NO_OPTION) {
                    return;
                }
            }

            BufferedWriter writer;
            try {
                writer = new BufferedWriter(new FileWriter(fileName));

                chatTA.write(writer);
                writer.close();
            } catch (IOException ex) {
                Logger.getLogger(ChatGui.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
// TODO add your handling code here:
    }//GEN-LAST:event_copyBtActionPerformed

    //retrieve list from light server
    private void getOnlinePeersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getOnlinePeersActionPerformed

        DefaultListModel listmodel;

        listmodel = new DefaultListModel();

        Map<Integer, String> PORT = p.getOnlinePeerNameList();
        Set<Integer> key = PORT.keySet();
        for (Integer k : key) {

            listmodel.addElement(PORT.get(k));

        }
        ChatGui.onlineUserLt.setModel(listmodel);

// TODO add your handling code here:
    }//GEN-LAST:event_getOnlinePeersActionPerformed

    //send a unicast message to all the selected peers
    private void uniCastMsgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uniCastMsgActionPerformed

        String name = onlineUserLt.getSelectedValue().toString();

        List l = onlineUserLt.getSelectedValuesList();

        System.out.print(l + "online user");
        Iterator itr = l.listIterator();

        Integer port = 0;
        try {
            while (itr.hasNext()) {

                port = p.getPortNumber(itr.next().toString());
                Socket SOCK = new Socket("localhost", port);
                PrintWriter TEMP_OUT = new PrintWriter(SOCK.getOutputStream());
                TEMP_OUT.println(ChatGui.UserName + " : " + messageTF.getText());
                TEMP_OUT.flush();
            }
// TODO add your handling code here:
        } catch (SQLException ex) {
            Logger.getLogger(ChatGui.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ChatGui.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_uniCastMsgActionPerformed

    private void messageTFFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_messageTFFocusGained

        messageTF.setText("");
// TODO add your handling code here:
    }//GEN-LAST:event_messageTFFocusGained

    private void messageTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_messageTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_messageTFActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ChatGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ChatGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ChatGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ChatGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ChatGui(PORT, UserName).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JTextArea chatTA;
    private javax.swing.JButton connectBt;
    private javax.swing.JButton copyBt;
    private javax.swing.JButton disconnectBt;
    private javax.swing.JButton getOnlinePeers;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    public static javax.swing.JTextField messageTF;
    private javax.swing.JButton multiCastBt;
    public static javax.swing.JList onlineUserLt;
    private javax.swing.JButton uniCastMsg;
    // End of variables declaration//GEN-END:variables
}
