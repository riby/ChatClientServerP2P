

package chatclientserverp2p;


import model.PeerServerDBConnect;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Scanner;
import java.util.Set;
import java.util.Vector;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ComboBoxModel;
import javax.swing.JComboBox;

/**
 *
 * @author Riby
 */
public class RegisterPeerOnNetwork extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    
    public static Map<Integer, Boolean> PORT = new HashMap<Integer, Boolean>();
        ExecutorService executor = Executors.newFixedThreadPool(30);
            
    public static final int MAX_PORT = 10;
    public static int s = 12345;

    public static String USER = "default";
     public static Thread[] Y = new Thread[30];
     public static int counter=0;

    public RegisterPeerOnNetwork(String USER) {

        initComponents();
        PeerServerDBConnect ser = new PeerServerDBConnect();
        PORT=ser.getServerList();
        
        System.out.println(PORT);
        this.USER = USER;
        L_UserTitle.setText(USER + "'s Messenger");
      available_chatServers.removeAllItems();
      
    }

    //connect ot server and get the list of peers connected to network
    private void getServerListStatus() throws FileNotFoundException {
    
            PeerServerDBConnect ser = new PeerServerDBConnect();
        PORT=ser.getServerList();
    
        System.out.println(PORT);
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        B_createServer = new javax.swing.JButton();
        B_JoinChat = new javax.swing.JButton();
        available_chatServers = new javax.swing.JComboBox();
        L_availbleServerList = new javax.swing.JLabel();
        L_UserTitle = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        B_createServer.setText("Create Port");
        B_createServer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                B_createServerActionPerformed(evt);
            }
        });

        B_JoinChat.setText("Register on Network");
        B_JoinChat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                B_JoinChatActionPerformed(evt);
            }
        });

        available_chatServers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                available_chatServersActionPerformed(evt);
            }
        });

        L_availbleServerList.setText("Available Ports");

        L_UserTitle.setText("User Name'chatbox");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(100, 100, 100)
                .addComponent(L_UserTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(73, 73, 73)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(B_JoinChat)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(B_createServer)
                        .addGap(41, 41, 41)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(L_availbleServerList))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(available_chatServers, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(29, 29, 29))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(L_UserTitle)
                .addGap(86, 86, 86)
                .addComponent(L_availbleServerList)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(B_createServer, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(available_chatServers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(B_JoinChat)
                .addContainerGap(74, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    //get the free port from server and run the peer
    private void B_createServerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_B_createServerActionPerformed

        PeerEventListner ch = null;
        Thread x = null;
        int port = 0;
        try {
            port = getFreePort(USER);
            
        } catch (SQLException ex) {
            Logger.getLogger(RegisterPeerOnNetwork.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.out.println("Port" + port);

       ch = new PeerEventListner(port);
       x = new Thread(ch);
       x.start();
        available_chatServers.removeAllItems();
        available_chatServers.addItem(port);
  

    }//GEN-LAST:event_B_createServerActionPerformed

    //initiate chat window for peer
    private void B_JoinChatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_B_JoinChatActionPerformed
        // TODO add your handling code here:
         
         ChatGui c1 = new ChatGui(Integer.parseInt(available_chatServers.getSelectedItem().toString()),USER);
         c1.setVisible(true);
          this.dispose();
      
    }//GEN-LAST:event_B_JoinChatActionPerformed

    private void available_chatServersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_available_chatServersActionPerformed

        available_chatServers.setToolTipText("");
// TODO add your handling code here:
    }//GEN-LAST:event_available_chatServersActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RegisterPeerOnNetwork.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RegisterPeerOnNetwork.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RegisterPeerOnNetwork.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RegisterPeerOnNetwork.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
            new RegisterPeerOnNetwork(USER).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton B_JoinChat;
    private javax.swing.JButton B_createServer;
    private javax.swing.JLabel L_UserTitle;
    private javax.swing.JLabel L_availbleServerList;
    private javax.swing.JComboBox available_chatServers;
    // End of variables declaration//GEN-END:variables

    
    //public 
    public int getFreePort(String user_name) throws SQLException {
        
        
        Set<Integer> key = PORT.keySet();
        for (Integer k : key) {
            if (PORT.get(k)) {
                PeerServerDBConnect sDb=new PeerServerDBConnect();
                PORT.put(k, Boolean.FALSE);
                sDb.updateServerStatus(k,0,user_name);
                return k;
            }
        }
        //return 0 if no port is available
        return 0;

    }

}
